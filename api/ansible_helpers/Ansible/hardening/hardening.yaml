---
- name: Remove old key from known_hosts
  hosts: '{{ target | default("all") }}'
  gather_facts: false
  become: true

  tasks:
    - name: Remove old key from known_hosts
      ansible.builtin.command: ssh-keygen -f "~/.ssh/known_hosts" -R "{{ ansible_host }}"
      delegate_to: localhost
      ignore_errors: yes

    - name: Remove old key from known_hosts
      ansible.builtin.command: ssh-keygen -f "/root/.ssh/known_hosts" -R "{{ ansible_host }}"
      delegate_to: localhost
      ignore_errors: yes

# Initial Server Configuration
- name: Execute shell commands on a remote host via SSH
  hosts: '{{ target | default("all") }}'
  gather_facts: true
  become: true
  tasks:
    - name: Translate IP to UUID
      ansible.builtin.set_fact:
        uuid: "{{ ansible_host | to_uuid }}"

    - name: Save UUID to file
      ansible.builtin.copy:
        content: "{{ uuid }}"
        dest: /etc/host_uuid

    - name: Update package list
      apt:
        update_cache: true
      ignore_errors: yes
      no_log: yes

    - name: Upgrade all packages
      apt:
        upgrade: true
        autoremove: true
        autoclean: true
      ignore_errors: yes
      no_log: yes

    - name: Install Common Packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - python3-pip
        - curl
        - nodejs
        #- gnupg
        #- lsb-release
        #- software-properties-common
        - ufw
        #- fail2ban
        #- unzip
        - wget
        - git
        - vim
        #- htop
        #- tmux
        - net-tools
        #- dnsutils
        #- nmap
        #- tcpdump
        #- iputils-ping
        #- traceroute
        #- mtr
        #- iftop
        #- nethogs
        #- iotop
        #- sysstat
        #- lsof
        # - strace
        # - ltrace
        # - tcpflow
        # - nload
        # - nmon
        - qrencode
        - jq
        - dos2unix
        # - resolvconf

    - name: Install and upgrade pip
      block:
        - pip:
            name: pip
            state: latest
            executable: pip3
          register: pip_result
          failed_when: false
          ignore_errors: true
        - pip:
            name: pip
            state: latest
            executable: pip3
            extra_args: "--upgrade --break-system-packages"
          when: pip_result is failed

    - name: Install python-pyOpenSSL python package
      block:
        - name: Install python-pyOpenSSL python package
          ansible.builtin.pip:
            name: pyOpenSSL
          register: pyOpenSSL_result
          failed_when: false
          ignore_errors: true
        - name: Retry Install python-pyOpenSSL python package with --break-system-packages
          ansible.builtin.pip:
            name: pyOpenSSL
            extra_args: "--break-system-packages"
          when: pyOpenSSL_result is failed

    - name: Install acme-tiny python package
      block:
        - name: Install acme-tiny python package
          ansible.builtin.pip:
            name: acme-tiny
          register: acme_tiny_result
          failed_when: false
          ignore_errors: true
        - name: Retry Install acme-tiny python package with --break-system-packages
          ansible.builtin.pip:
            name: acme-tiny
            extra_args: "--break-system-packages"
          when: acme_tiny_result is failed

    - name: Check if sysctl files exist
      stat:
        path: "/proc/sys/{{ item.name | replace('.', '/') }}"
      register: sysctl_files
      with_items:
        # - { name: "fs.file-max", value: "200000" }
        - { name: "net.ipv4.ip_forward", value: "1" }
        # - { name: "net.ipv4.conf.all.proxy_arp", value: "1" }
        # - { name: "net.ipv6.conf.all.forwarding", value: "1" }
        # - { name: "vm.swappiness", value: "10" }
        # - { name: "vm.dirty_ratio", value: "60" }
        # - { name: "vm.dirty_background_ratio", value: "2" }
        # - { name: "net.ipv4.tcp_synack_retries", value: "2" }
        # - { name: "net.ipv4.ip_local_port_range", value: "2000 65535" }
        # - { name: "net.ipv4.tcp_rfc1337", value: "1" }
        # - { name: "net.ipv4.tcp_fin_timeout", value: "15" }
        # - { name: "net.ipv4.tcp_keepalive_time", value: "300" }
        # - { name: "net.ipv4.tcp_keepalive_probes", value: "5" }
        # - { name: "net.ipv4.tcp_keepalive_intvl", value: "15" }
        # - { name: "net.core.rmem_default", value: "31457280" }
        # - { name: "net.core.rmem_max", value: "12582912" }
        # - { name: "net.core.wmem_default", value: "31457280" }
        # - { name: "net.core.wmem_max", value: "12582912" }
        # - { name: "net.core.somaxconn", value: "4096" }
        # - { name: "net.core.netdev_max_backlog", value: "65536" }
        # - { name: "net.core.optmem_max", value: "25165824" }
        # - { name: "net.ipv4.tcp_mem", value: "65536 131072 262144" }
        # - { name: "net.ipv4.udp_mem", value: "65536 131072 262144" }
        # - { name: "net.ipv4.tcp_rmem", value: "8192 87380 16777216" }
        # - { name: "net.ipv4.udp_rmem_min", value: "16384" }
        # - { name: "net.ipv4.tcp_wmem", value: "8192 65536 16777216" }
        # - { name: "net.ipv4.udp_wmem_min", value: "16384" }
        # - { name: "net.ipv4.tcp_max_tw_buckets", value: "1440000" }

    - name: Apply sysctl tweaks
      ansible.posix.sysctl:
        name: "{{ item.item.name }}"
        value: "{{ item.item.value }}"
        state: present
        reload: true
      when: item.stat.exists # Apply tweak only when the file exists
      with_items: "{{ sysctl_files.results }}"

    - name: Propagate DNS Records
      community.general.cloudflare_dns:
        zone: "{{ domain }}"
        record: "{{ uuid }}.{{ domain }}"
        type: A
        value: "{{ ansible_host }}"
        #proxied: true
        account_email: "{{ cloudflare_email }}"
        api_token: "{{ cloudflare_api_token }}"

- name: Deploy Node.js App
  hosts: '{{ target | default("all") }}'
  become: yes 

  vars:
    app_name: node_api
    app_directory: /var/www/node_api
    github_repo_url: https://github.com/ngunq/node_api.git
    github_branch: master  
    nodejs_version: 16 
    app_user: root
    app_group: root

  tasks:
    - name: Create app directory
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Clone GitHub repository
      git:
        repo: "{{ github_repo_url }}"
        dest: "{{ app_directory }}"
        version: "{{ github_branch }}"
        force: yes
      become_user: "{{ app_user }}"

    - name: Install app dependencies
      command: "npm install"
      args:
        chdir: "{{ app_directory }}"
      become_user: "{{ app_user }}"

    - name: Start your Node.js app
      command: "npm start"
      args:
        chdir: "{{ app_directory }}"
      async: 3600
      poll: 0
      ignore_errors: yes
      become_user: "{{ app_user }}"

- name: Update Firewall Rules
  hosts: '{{ target | default("all") }}'
  gather_facts: true
  become: true
  vars:
    allowed_ssh_ips: []
    domain: "{{ domain }}"
    cloudflare_api_token: "{{ cloudflare_api_token }}"
    cloudflare_email: "{{ cloudflare_email }}"

  tasks:
    - name: Reset UFW
      community.general.ufw:
        state: reset

    - name: Allow SSH from Whitelist IP's
      community.general.ufw:
        rule: allow
        proto: tcp
        port: ssh
        from_ip: "{{ item }}"
      loop: "{{ allowed_ssh_ips }}"

    - name: Deny SSH from all other IP's
      community.general.ufw:
        rule: deny
        proto: tcp
        port: ssh
        from_ip: any

    - name: Allow call Node API from Whitelist IP's
      community.general.ufw:
        rule: allow
        proto: tcp
        port: 3000
        from_ip: "{{ item }}"
      loop: "{{ allowed_ssh_ips }}"

    - name: Deny call Node API from all other IP's
      community.general.ufw:
        rule: deny
        proto: tcp
        port: 3000
        from_ip: any

    - name: Enable UFW
      community.general.ufw:
        state: enabled

    - name: reload UFW
      community.general.ufw:
        state: reloaded
    
    - name: Finalizer
      ansible.builtin.debug:
        msg:
          uuid: "{{ hostvars[ansible_host]['uuid'] }}"

    